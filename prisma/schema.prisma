generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String      @id @default(cuid())
  name             String?
  spotifyAccountId String?     @unique
  image            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  accounts         Account[]
  sharelist        Sharelist?
  UserShared       UserShared?
  User_A           User[]      @relation("Friends")
  User_B           User[]      @relation("Friends")
}

model Sharelist {
  id        String          @id @default(uuid())
  ownedById String          @unique
  ownedBy   User            @relation(fields: [ownedById], references: [id])
  songs     SharelistSong[]
}

model SharelistSong {
  id                   String    @id @default(uuid())
  belongsToSharelistId String
  songId               String
  belongsToSharelist   Sharelist @relation(fields: [belongsToSharelistId], references: [id])
  song                 Song      @relation(fields: [songId], references: [id])
}

model Song {
  id             String          @id @default(uuid())
  name           String
  album          String
  cover          String
  artists        String
  spotifyTrackId String          @unique
  sharelists     SharelistSong[]
}

model UserShared {
  userId     String @id
  userUUID   String
  expires_at Int
  user       User   @relation(fields: [userId], references: [id])
}
